name: Main Workflow

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
    lint:
      runs-on: ubuntu-latest
      strategy:
        matrix:
          python-version: ["3.12"]

      steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff
      - name: Analysing the code with ruff
        run: |
          ruff check --config pyproject.toml $(git ls-files '*.py')

    analyze:
          runs-on: ubuntu-latest
          needs: lint
          permissions:
            actions: read
            contents: read
            security-events: write

          strategy:
            fail-fast: false
            matrix:
              language: ['python' ]
          steps:
          - name: Checkout repository
            uses: actions/checkout@v3

          - name: Initialize CodeQL
            uses: github/codeql-action/init@v3
            with:
              languages: ${{ matrix.language }}
              queries: security-and-quality

          - name: Autobuild
            uses: github/codeql-action/autobuild@v2

          - name: Perform CodeQL Analysis
            uses: github/codeql-action/analyze@v2
            with:
              category: "/language:${{matrix.language}}"

    build:
      runs-on: ubuntu-latest
      needs: analyze

      steps:
        - uses: actions/checkout@v4

        - name: Set up Python version
          uses: actions/setup-python@v5
          with:
            python-version: '3.12'

        - name: Create and start virtual environment
          run: |
            python -m venv venv
            source venv/bin/activate

        - name: Install dependencies
          run: pip install -r requirements.txt

        - name: Install Doppler CLI
          uses: dopplerhq/cli-action@v3

        - name : Migrate Database and Collect Static
          run: |
            doppler run -- python manage.py makemigrations --noinput
            doppler run -- python manage.py migrate --noinput
            doppler run -- python manage.py collectstatic --noinput
          env :
            DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN }}

        - name: Run Tests
          run: |
            doppler run -- python manage.py test
          env:
            DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN }}

        - name: Zip artifact for deployment
          run: zip release.zip ./* -r

        - name: Upload artifact for deployment jobs
          uses: actions/upload-artifact@v4
          with:
            name: python-app
            path: |
              release.zip
              !venv/**

    deploy:
      runs-on: ubuntu-latest
      needs: build
      environment:
        name: 'Production'
        url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

      steps:
        - name: Download artifact from build job
          uses: actions/download-artifact@v4
          with:
            name: python-app

        - name: Unzip artifact for deployment
          run: unzip release.zip

        - name: 'Deploy to Azure Web App'
          uses: azure/webapps-deploy@v3
          id: deploy-to-webapp
          with:
            app-name: 'event-subash'
            slot-name: 'Production'
            publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_C9B403BF59794F6490DC93D63BD17008 }}