services:
  backend:
    build:
      context: .
    container_name: backend
    restart: on-failure
    volumes:
      - .:/app
      - event_data:/app/
    command: gunicorn -b 0.0.0.0:8000 --worker-class=gevent --worker-connections=1000 --workers=2 root.wsgi
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - event_net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://backend:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 5

  worker:
    container_name: worker
    build: .
    restart: on-failure
    env_file:
      - .env
    command: >
      celery -A root worker --loglevel=info
    depends_on:
      backend:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "celery -A root inspect ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - event_data:/app/
    networks:
      - event_net

  redis:
    image: redis:6.2-alpine
    container_name: redis
    restart: always
    networks:
      - event_net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 3

  nginxrp:
    container_name: nginxrp
    restart: always
    build: ./nginx-server
    ports:
      - 80:80
    volumes:
      - event_data:/app/
    depends_on:
      backend:
        condition: service_healthy
      worker:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - event_net

volumes:
  event_data:
    driver: local

networks:
  event_net:
    driver: bridge
