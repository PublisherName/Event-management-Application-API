services:
  backend:
    build:
      context: .
    container_name: backend
    hostname: backend
    restart: on-failure
    volumes:
      - .:/app
      - static_volume:/app/public/static
      - media_volume:/app/public/media
      - log_volume:/app/logs
    command: >
      sh -c "python manage.py makemigrations --noinput &&
            python manage.py migrate --noinput &&
            python manage.py seed_preferences &&
            python manage.py collectstatic --noinput &&
            gunicorn -b 0.0.0.0:8000 --worker-class=gevent --worker-connections=1000 --workers=2 root.wsgi"
    stdin_open: true
    depends_on:
      redis:
        condition: service_healthy
    tty: true
    networks:
      - shared_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://backend:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 5

  worker:
    container_name: worker
    build: .
    restart: on-failure
    env_file:
      - .env
    command: >
      sh -c "celery -A root worker --loglevel=info"
    depends_on:
      backend:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "celery -A root inspect ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    volumes: [.:/app]
    networks:
      - shared_network

  redis:
    image: redis:6.2-alpine
    container_name: redis
    restart: always
    networks:
      - shared_network
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 3

  nginxrp:
    container_name: nginxrp
    restart: always
    build: ./nginx-server
    ports:
      - 80:80
    depends_on:
      backend:
        condition: service_healthy
      worker:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - shared_network
    volumes:
      - static_volume:/app/public/static
      - media_volume:/app/public/media
      - log_volume:/app/logs

volumes:
  redis_data:
  static_volume:
  media_volume:
  log_volume:

networks:
  shared_network:
    driver: bridge
